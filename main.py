import telebot
import config
import pars
import random
import time

from telebot import types

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    #sti = open('static/welcome.webp', 'rb')
    #bot.send_sticker(message.chat.id, sti)

    # keyboard
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    item1 = types.KeyboardButton("GAZP")
    item2 = types.KeyboardButton("SBER")
    item3 = types.KeyboardButton("MMK")
    item4 = types.KeyboardButton("–í –º–µ–Ω—é")
    item5 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")

    markup.add(item1, item2, item3, item4, item5, btn1, btn2)

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>–ö–ª—é—á–µ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –í–æ–≤–∞</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ü–µ–Ω–∞–º–∏ –Ω–∞ –∞–∫—Ü–∏—è—Ö.".format(
                         message.from_user),
                     parse_mode='html', reply_markup=markup)
    #d = message.from_user
    #print(d['first_name'])
    with open('data.txt','a') as f:
        f.write(str(message.from_user))
    print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0.first_name} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {1.username}".format(message.from_user, message.from_user))
def take_limit(name, coll):
    pass

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':
        if message.text == 'AZP':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        ####
        elif (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"):
            bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ–µ—Ç.. –°–ø–∞—Å–∏–±–æ —á—Ç–æ —á–∏—Ç–∞–µ—à—å —Å—Ç–∞—Ç—å—é!)")
            print('!')
        elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn1 = types.KeyboardButton("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
            btn2 = types.KeyboardButton("–ß—Ç–æ —è –º–æ–≥—É?")
            back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.add(btn1, btn2, back)
            bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

        elif (message.text == "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"):
            with open('data.txt', 'a') as f:
                f.write('–ø—Ä–∏–≤–µ—Ç!')
            bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–º–µ–Ω–∏..")
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add()

        elif message.text == "–ß—Ç–æ —è –º–æ–≥—É?":
            bot.send_message(message.chat.id, text="–ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è —Å —á–∏—Ç–∞—Ç–µ–ª—è–º–∏")

        elif (message.text == "D!!–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è")
            button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
            markup.add(button1, button2)
            bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
        ###
        elif message.text == '–í –º–µ–Ω—é': #('–í –º–µ–Ω—é' or '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or '–ú–µ–Ω—é'):
            welcome(message)
        elif message.text == 'GAZP':
            #addd = pars.box['gazp']['adress']
            #pris = pars.ticker(pars.box['gazp']['adress'])
            #text_price = "–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ –ì–∞–∑–ø—Ä–æ–º: " + str(pris)
            text_price = "–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ –ì–∞–∑–ø—Ä–æ–º: " + str(pars.ticker(pars.box['gazp']['adress']))
            bot.send_message(message.chat.id, text_price)
            #bot.send_message(message.chat.id, text_price1)

        elif message.text == 'SBER':
            #text_price = "–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫: " + str(pars.update_ticker_SBER())
            #bot.send_message(message.chat.id, text_price)
            text_price = "–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ –°–±–µ—Ä–±–∞–Ω–∫: " + str(pars.ticker(pars.box['sber']['adress']))
            bot.send_message(message.chat.id, text_price)
        elif message.text == 'MMK':
            text_price = "–¶–µ–Ω–∞ –∞–∫—Ü–∏–∏ –ú–ú–ö: " + str(pars.ticker(pars.box['mmk']['adress']))
            bot.send_message(message.chat.id, text_price)

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':

            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')
        with open('data.txt', 'a') as f:
                    f.write("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0.first_name} –∏–º–µ–Ω–∏: {1.username} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: ".format(message.from_user, message.from_user))
                    f.write(str(message.text))
                    print(type(str(message.text)))
                    print('–æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞')
                    print(str(message.text))


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            # remove inline buttons
            #bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="üòä –ö–∞–∫ –¥–µ–ª–∞?",
             #                     reply_markup=None)

            # show alert
            bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                      text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


# RUN
while True:
    try:
        bot.polling(none_stop=True)

    except Exception as e:
        print("error")
        print(e) #–µ—Å–ª–∏ —É –≤–∞—Å –ª–æ–≥–≥–µ—Ä–∞ –Ω–µ—Ç,
        # –∏–ª–∏ import traceback; traceback.print_exc() –¥–ª—è –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ—ã
        time.sleep(15)